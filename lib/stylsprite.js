// Generated by CoffeeScript 1.6.3
var exports, fs, path, plugin, stylus;

fs = require('fs');

path = require('path');

stylus = require('stylus');

plugin = function(options) {
  var cssPath, imgPath, pixelRatio, spritePath, stylsprite;
  if (options == null) {
    options = {};
  }
  cssPath = options.cssPath || '';
  imgPath = options.imgPath || '';
  spritePath = options.spritePath || '';
  pixelRatio = options.pixelRatio || 1;
  stylsprite = function(params) {
    var backgroundPosition, backgroundSize, dirName, extName, height, imagePath, json, jsonPath, jsonStr, positionX, positionY, spriteHeight, spriteName, spriteTokenName, spriteWidth, token, url, urlArgs, urlChain, value, width, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    urlArgs = params.args.nodes[0];
    if (urlArgs.nodes.length) {
      urlChain = [];
      _ref = urlArgs.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        urlChain.push(value.string);
      }
      url = urlChain.join('');
    } else {
      url = urlArgs.nodes[0];
    }
    extName = path.extname(url);
    dirName = path.dirname(url);
    spriteName = path.basename(dirName);
    spriteTokenName = path.basename(url, extName);
    jsonPath = path.join(spritePath, spriteName + '.json');
    imagePath = dirName + extName;
    jsonStr = fs.readFileSync(jsonPath);
    json = JSON.parse(jsonStr.toString());
    spriteWidth = 0;
    spriteHeight = 0;
    _ref1 = json.images;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      token = _ref1[_j];
      spriteWidth = Math.max(spriteWidth, token.positionX + token.width);
      spriteHeight = Math.max(spriteHeight, token.positionY + token.height);
    }
    _ref2 = json.images;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      token = _ref2[_k];
      if (!(token.name === spriteTokenName)) {
        continue;
      }
      positionX = token.positionX;
      positionY = token.positionY;
      width = token.width;
      height = token.height;
      backgroundSize = null;
      if (pixelRatio !== 1) {
        width /= pixelRatio;
        height /= pixelRatio;
        positionX /= pixelRatio;
        positionY /= pixelRatio;
        spriteWidth /= pixelRatio;
        spriteHeight /= pixelRatio;
        backgroundSize = new stylus.nodes.Property(['background-size'], "" + spriteWidth + "px " + spriteHeight + "px");
      }
      backgroundPosition = new stylus.nodes.Property(['background-position'], "" + (-positionX) + "px " + (-positionY) + "px");
      width = new stylus.nodes.Property(["width"], "" + width + "px");
      height = new stylus.nodes.Property(["height"], "" + height + "px");
      if (backgroundSize) {
        this.closestBlock.nodes.splice(this.closestBlock.index + 1, 0, backgroundPosition, backgroundSize, width, height);
      } else {
        this.closestBlock.nodes.splice(this.closestBlock.index + 1, 0, backgroundPosition, width, height);
      }
      break;
    }
    return new stylus.nodes.Property(['background-image'], "url(" + imagePath + ")");
  };
  return function() {
    return function(context) {
      return context.define('stylsprite', stylsprite);
    };
  };
};

exports = module.exports = plugin;

exports.path = __dirname;
